datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum PostType {
  controller
  motorController
  motor
  coprocessor
  wheel
  gearsAndGearboxes
  beltsAndChains
  bearingsAndHexShafts
  bumperMaterial
  sensor
  other
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  username         String?           @unique
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  teamNumber       Int?
  admin            Boolean           @default(false)
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  favouritedTeams  FavouritedTeam[]
  favouritedEvents FavouritedEvent[]
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  content          String?
  price            Int
  type             PostType
  currencyType     String?
  formattedAddress String?
  latitude         Float?
  longitude        Float?
  imageUrl         String?
  media            String[]
  published        Boolean  @default(false)
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String
}

model FavouritedTeam {
  id          Int     @id @default(autoincrement())
  team_number Int
  website     String?
  nickname    String
  city        String?
  state_prov  String?
  country     String?
  rookie_year Int
  User        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
}

model FavouritedEvent {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  state_prov       String
  city             String
  country          String
  first_event_code String
  start_date       String
  end_date         String
  User             User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?
}

model Team {
  team_number Int      @id @unique
  socials     Social[]
}

model Social {
  id       Int     @id @default(autoincrement())
  handle   String
  type     String
  verified Boolean @default(false)
  Team     Team?   @relation(fields: [teamId], references: [team_number], onDelete: Cascade)
  teamId   Int?
  userId   String?
}

model Event {
  /// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
  key                 String   @id
  /// Official name of event on record either provided by FIRST or organizers of offseason event.
  name                String
  /// Event short code, as provided by FIRST.
  event_code          String
  /// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
  event_type          Int
  // district				 District
  /// City, town, village, etc. the event is located in.
  city                String
  /// State or Province the event is located in.
  state_prov          String
  /// Country the event is located in.
  country             String
  /// Event start date in yyyy-mm-dd format.
  start_date          String
  /// Event end date in yyyy-mm-dd format.
  end_date            String
  /// Year the event data is for.
  year                Int
  /// Same as name but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
  short_name          String?
  /// Event Type, eg Regional, District, or Offseason.
  event_type_string   String
  /// Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
  week                Int?
  /// Address of the event's venue, if available.
  address             String?
  /// Postal code from the event address.
  postal_code         String?
  /// Google Maps Place ID for the event address.
  gmaps_place_id      String?
  /// Link to address location on Google Maps.
  gmaps_url           String?
  /// Latitude for the event address.
  lat                 Float?
  /// Longitude for the event address.
  lng                 Float?
  /// Name of the location at the address for the event, eg. Blue Alliance High School.
  location_name       String?
  /// Timezone name.
  timezone            String?
  /// The event's website, if any.
  website             String?
  /// The FIRST internal Event ID, used to link to the event on the FRC webpage.
  first_event_id      String?
  /// Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
  first_event_code    String?
  // webcasts 			 Webcast[]
  // An array of event keys for the divisions at this event.
  division_keys       String[]
  /// The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of divison_keys.
  parent_event_key    String?
  /// Playoff Type, as defined here:
  playoff_type        Int?
  /// String representation of the playoff_type, or null.
  playoff_type_string String?
}
