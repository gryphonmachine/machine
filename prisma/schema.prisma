datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum PostType {
  controller
  motorController
  motor
  coprocessor
  wheel
  gearsAndGearboxes
  beltsAndChains
  bearingsAndHexShafts
  bumperMaterial
  sensor
  other
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  username         String?           @unique
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  teamNumber       Int?
  admin            Boolean           @default(false)
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  favouritedTeams  FavouritedTeam[]
  favouritedEvents FavouritedEvent[]
  apiKeys          ApiKey[]
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  content          String?
  price            Int
  type             PostType
  currencyType     String?
  formattedAddress String?
  latitude         Float?
  longitude        Float?
  imageUrl         String?
  media            String[]
  published        Boolean  @default(false)
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId         String
}

model FavouritedTeam {
  id          Int     @id @default(autoincrement())
  team_number Int
  website     String?
  nickname    String
  city        String?
  state_prov  String?
  country     String?
  rookie_year Int
  User        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
}

model FavouritedEvent {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  state_prov       String
  city             String
  country          String
  first_event_code String
  start_date       String
  end_date         String
  User             User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?
}

model Team {
  team_number    Int      @id @unique
  address        String?
  city           String?
  country        String?
  gmaps_place_id String?
  gmaps_url      String?
  key            String
  lat            Int?
  lng            Int?
  location_name  String?
  motto          String?
  name           String?
  nickname       String?
  postal_code    String?
  rookie_year    Int?
  school_name    String?
  state_prov     String?
  website        String?
  socials        Social[]
  events         Event[]
}

model Social {
  id       Int     @id @default(autoincrement())
  handle   String
  type     String
  verified Boolean @default(false)
  Team     Team?   @relation(fields: [teamId], references: [team_number], onDelete: Cascade)
  teamId   Int?
  userId   String?
}

model Event {
  key                 String     @id
  name                String
  event_code          String
  event_type          Int
  city                String?
  state_prov          String?
  country             String?
  start_date          String
  end_date            String
  year                Int
  short_name          String?
  event_type_string   String
  week                Int?
  address             String?
  postal_code         String?
  gmaps_place_id      String?
  gmaps_url           String?
  lat                 Float?
  lng                 Float?
  location_name       String?
  timezone            String?
  website             String?
  first_event_id      String?
  first_event_code    String?
  webcasts            Json[]
  division_keys       String[]
  parent_event_key    String?
  playoff_type        Int?
  playoff_type_string String?
  matches             Match[]
  awards              Award[]
  alliances           Alliance[]
  teams               Team[]
}

model Match {
  id               Int     @id @default(autoincrement())
  key              String? @unique
  comp_level       String?
  set_number       Int?
  match_number     Int?
  alliances        Json?
  winning_alliance String?
  event_key        String
  time             BigInt?
  actual_time      BigInt?
  predicted_time   BigInt?
  post_result_time BigInt?
  score_breakdown  Json?
  videos           Json?
  Event            Event   @relation(fields: [event_key], references: [key])
}

model Award {
  id             Int     @unique @default(autoincrement())
  award_type     Int
  event_key      String
  name           String
  recipient_list Json?
  year           Int
  person         String?
  Event          Event?  @relation(fields: [event_key], references: [key], onDelete: Cascade)
}

model Alliance {
  id        Int      @unique @default(autoincrement())
  event_key String
  declines  String[]
  name      String
  picks     String[]
  status    Json?
  Event     Event?   @relation(fields: [event_key], references: [key], onDelete: Cascade)
}

model ApiKey {
  id     Int    @id @default(autoincrement())
  key    String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
